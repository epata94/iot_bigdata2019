* Review Rework 및 Submit 결과 받아올 때 필요한 명령

- 마지막 커밋 수정
git commit --amend

- fetch 한 내용 pull/merge 전에 확인 및 비교
git checkout FETCH_HEAD
git diff master

- 특정 변경의 패치셋 가져오기
git fetch ssh://admin@HRDC504-00:29418/handson refs/changes/43/43/2 && git checkout FETCH_HEAD

- 특정 변경의 패치셋 체리픽
git fetch ssh://admin@HRDC504-00:29418/handson refs/changes/43/43/2 && git cherry-pick FETCH_HEAD

- 특정 변경의 패치셋 Pull
git pull ssh://admin@HRDC504-00:29418/handson refs/changes/43/43/2

- 가져온 패치셋을 포함한 변경 내용 확인
git log -p -all

- 가져온 패치셋과 현재(로컬) master 비교
git diff master

- Commit 취소
git reset --hard HEAD		모든 변경 무시 현재 버전으로 정리
git reset --hard HEAD^		현재 버전 하나 앞으로 정리 - 최종 Commit 하나 취소
git reset --hard HEAD~2		최종 Commit 2개(또는 N개) 취소
git reset --hard origin/master		서버의 master 버전을 기준으로 돌림
git reset --hard 84cf88		특정 Commit 버전으로 돌림

- 특정 Commit ID로 브랜치 만들기
git checkout 84cf88		임시 브랜치 생성(브랜치를 떠나면 지워짐)
git checkout -b temp		위에서 만들어진 임시 브랜치의 내용을 temp라는 브랜치로 생성

- Cherry Pick
git cherry-pick <Commit ID>
Conflict Resolution (git add 등)
git commit

- Gerrit Verify 권한 부여
Project ==> Access ==> Edit 버튼
Add Reference ==> refs/heads/*
Add Permission ==> Label Verified
Add Group ==> git-training
Save Changes 버튼

- git review (Git Bash에서 현재 구동 안함)

git push origin HEAD:refs/for/master 를 하나의 명령으로
  git review

서버의 review 목록 조회
  git review -l

서버의 review 내용 fetch
  git review  -d <Change 번호>	Gerrit 리뷰 번호
  git review  -d <Change 번호>,2	Patch Set 2번
  git review  -d <Commit ID>	git의 Commit ID
  git review  -d <Change ID>		I로 시작하는 Gerrit Change-ID

- rebase 특정 Commit History로 이동

git rebase --onto

